{"version":3,"file":"static/js/MoviesPage.377e6a48.chunk.js","mappings":"yOACA,EAA4B,8BAA5B,EAAuE,+BAAvE,EAAyH,qCAAzH,EAAsS,oC,oECqGtS,EA/FmB,WACjB,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,IAAIC,gBAAgBN,EAASO,QAAQC,IAAI,SAE9D,GAAIH,EAAc,CAChB,IAAMI,EAAS,mCAAG,uGACUC,EAAAA,EAAAA,IAAgBL,GAD1B,gBACRM,EADQ,EACRA,QAERZ,EAAUY,GACVd,EAAeQ,GAEfO,QAAQC,IAAIR,GANI,2CAAH,qDASfI,GACD,CACF,GAAE,CAACT,EAASO,SAEb,IAAMO,EAAY,mCAAG,WAAMC,GAAN,4EACnBA,EAAEC,kBAEEpB,EAAYqB,OAHG,kCAISP,EAAAA,EAAAA,IAAgBd,GAJzB,gBAITe,EAJS,EAITA,QAERZ,EAAUY,GACVd,EAAe,IAEQ,IAAnBc,EAAQO,QACVC,IAAAA,OAAAA,QACE,6DAIJjB,EAAQkB,MAAR,kBACKpB,GADL,IAEEO,OAAO,SAAD,OAAWX,MAjBF,4CAAH,sDAsBlB,OACE,iCACE,mBAAQyB,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAmBC,SAAUT,EAA9C,WACE,kBACEU,SAAU,SAAAT,GAAC,OAAIlB,EAAekB,EAAEU,OAAOC,MAA5B,EACXL,UAAWC,EACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZJ,MAAO9B,KAET,mBAAQ+B,KAAK,SAASN,UAAWC,EAAjC,yBAKHxB,EAAOoB,OAAS,GACfpB,EAAOiC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACT,yBACE,yBACE,UAAC,KAAD,CACEC,GAAI,CACFC,SAAS,WAAD,iBAAgBJ,IACxBK,MAAO,CACLC,KAAM,CACJtC,SAAAA,KALR,WAUE,gBACEuC,IACEL,EAAW,yCAC2BA,GAClC,sDAENM,IAAKP,KAEP,uBAAIA,QAnBCD,IAFF,MA4BlB,C,oOClGYS,EAAY,kCACnBC,EAAgBC,IAAAA,OAAa,CACjCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,sGAGpBL,EAAclC,IAAI,oBAAqB,CAC/CqC,OAAQ,CACNG,KAAM,KALoB,uBAE5BC,EAF4B,EAE5BA,KAF4B,kBAQvBA,GARuB,2CAAH,qDAWhBvC,EAAe,mCAAG,WAAMwC,GAAN,yFAGnBR,EAAclC,IAAI,gBAAiB,CAC3CqC,OAAQ,CACNK,MAAAA,KALyB,uBAE3BD,EAF2B,EAE3BA,KAF2B,kBAQtBA,GARsB,2CAAH,sDAYfE,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAAclC,IAAd,iBAA4B4C,IADzB,uBAClBH,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZI,EAAY,mCAAG,WAAMrB,GAAN,yFACHW,IAAAA,IAAA,gBAAmBX,EAAnB,aADG,uBAClBiB,EADkB,EAClBA,KADkB,kBAEnBA,EAAKK,MAFc,2CAAH,sDAKZC,EAAe,mCAAG,WAAMvB,GAAN,yFACNW,IAAAA,IAAA,gBAAmBX,EAAnB,aADM,uBACrBiB,EADqB,EACrBA,KADqB,kBAEtBA,EAAKtC,SAFiB,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/pages/MoviesPage.module.css?f2bc","pages/MoviesPage.jsx","services/MoviesApi.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviesPage_searchbar__h5+Hv\",\"searchForm\":\"MoviesPage_searchForm__MtlmP\",\"searchFormButton\":\"MoviesPage_searchFormButton__wppho\",\"SearchForm-button\":\"MoviesPage_SearchForm-button__r8iCn\",\"SearchFormBtnLabel\":\"MoviesPage_SearchFormBtnLabel__Iy7OQ\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__weghc\"};","import styles from './MoviesPage.module.css';\n\nimport { useState, useEffect } from 'react';\nimport { getMovieByQuery } from '../services/MoviesApi';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nconst MoviesPage = () => {\n  const [movieToFind, setMovieToFind] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const searchString = new URLSearchParams(location.search).get('query');\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await getMovieByQuery(searchString);\n\n        setMovies(results);\n        setMovieToFind(searchString);\n\n        console.log(searchString);\n      };\n\n      getMovies();\n    }\n  }, [location.search]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (movieToFind.trim()) {\n      const { results } = await getMovieByQuery(movieToFind);\n\n      setMovies(results);\n      setMovieToFind('');\n\n      if (results.length === 0) {\n        Notiflix.Notify.warning(\n          'No movies found! Please change your request and try again'\n        );\n      }\n\n      history.push({\n        ...location,\n        search: `query=${movieToFind}`,\n      });\n    }\n  };\n\n  return (\n    <>\n      <header className={styles.searchbar}>\n        <form className={styles.searchForm} onSubmit={handleSubmit}>\n          <input\n            onChange={e => setMovieToFind(e.target.value)}\n            className={styles.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={movieToFind}\n          />\n          <button type=\"submit\" className={styles.searchFormButton}>\n            search\n          </button>\n        </form>\n      </header>\n      {movies.length > 0 &&\n        movies.map(({ id, title, poster_path }) => (\n          <ul>\n            <li key={id}>\n              <Link\n                to={{\n                  pathname: `/movies/${`${id}`}`,\n                  state: {\n                    from: {\n                      location,\n                    },\n                  },\n                }}\n              >\n                <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                      : 'https://m.media-amazon.com/images/I/51dCwRZxtLL.jpg'\n                  }\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          </ul>\n        ))}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\nconst instanceMovie = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '5ba51c2da469b356ab2a1378773a169b',\n  }\n});\n\nexport const getTrendingMovie = async () => {\n  const {\n    data\n  } = await instanceMovie.get('/trending/all/day', {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const {\n    data\n  } = await instanceMovie.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\n\nexport const getMovieById = async movie_id => {\n  const { data } = await instanceMovie.get(`/movie/${movie_id}`);\n  return data;\n};\n\nexport const getMovieCast = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["useState","movieToFind","setMovieToFind","movies","setMovies","location","useLocation","history","useHistory","useEffect","searchString","URLSearchParams","search","get","getMovies","getMovieByQuery","results","console","log","handleSubmit","e","preventDefault","trim","length","Notiflix","push","className","styles","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","id","title","poster_path","to","pathname","state","from","src","alt","IMAGE_URL","instanceMovie","axios","baseURL","params","api_key","getTrendingMovie","page","data","query","getMovieById","movie_id","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}